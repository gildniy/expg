// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MERCHANT
  CUSTOMER
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL_REQUEST
  WITHDRAWAL_COMPLETED
  WITHDRAWAL_FAILED
  POINTS_ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  PENDING_APPROVAL
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum VirtualAccountStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum WithdrawalRequestStatus {
  REQUESTED
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  FAILED
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  name              String?
  role              Role               @default(CUSTOMER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  virtualAccount    VirtualAccount?
  transactions      Transaction[]
  pointBalance      PointBalance?
  withdrawalRequests WithdrawalRequest[]
}

model PointBalance {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  balance   Decimal  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VirtualAccount {
  id              String             @id @default(uuid())
  userId          String             @unique
  user            User               @relation(fields: [userId], references: [id])
  bankCode        String?
  bankName        String?
  accountNumber   String             @unique
  ezpgReferenceId String?   
  status          VirtualAccountStatus @default(ACTIVE)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model Transaction {
  id              String            @id @default(uuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  amount          Decimal
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  description     String?
  referenceId     String?
  merchantOrderId String?
  pointsChange    Decimal?          // Changed from Float to Decimal for accuracy
  metadata        Json?             // All specific fields like bankCode, accountNumber should go here
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([userId])
  @@index([merchantOrderId])
  @@index([referenceId, type])
}

model WithdrawalRequest {
  id            String                @id @default(uuid())
  userId        String
  user          User                  @relation(fields: [userId], references: [id])
  amount        Decimal
  status        WithdrawalRequestStatus @default(REQUESTED)
  bankCode      String
  accountNumber String
  accountHolder String
  description   String?
  transactionId String?               // Reference to the related transaction
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  @@index([userId])
} 
// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Needed when using Supabase for direct connections
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Used for direct connections to the database in Supabase
  directUrl = env("DIRECT_URL")
}

// User model
model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  name          String
  phone         String?
  role          UserRole        @default(CUSTOMER)
  status        AccountStatus   @default(ACTIVE)
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relationships
  virtualAccounts VirtualAccount[]
  transactions    Transaction[]
  points          Point[]
}

// Virtual Account model
model VirtualAccount {
  id                  String                @id @default(uuid())
  userId              String
  merchantId          String
  provider            VirtualAccountProvider @default(EZPG)
  bankCd              String
  accountNo           String
  accountName         String
  fixYn               String
  depositAmt          Decimal              @default(0) @db.Decimal(10, 2)
  currency            String
  status              VirtualAccountStatus @default(ACTIVE)
  providerTransactionId String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Relationships
  user                User                 @relation(fields: [userId], references: [id])
  transactions        Transaction[]
}

// Transaction model
model Transaction {
  id                  String            @id @default(uuid())
  userId              String
  merchantId          String
  virtualAccountId    String?
  amount              Decimal           @db.Decimal(12, 0)
  fee                 Decimal           @default(0) @db.Decimal(12, 0)
  transactionType     TransactionType
  status              TransactionStatus @default(PENDING)
  moid                String?
  providerTransactionId String?
  bankTransactionId   String?
  providerResponseCode String?
  providerResponseMsg String?
  metadata            Json?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  // Relationships
  user                User              @relation(fields: [userId], references: [id])
  virtualAccount      VirtualAccount?   @relation(fields: [virtualAccountId], references: [id])
}

// Point model
model Point {
  id           String              @id @default(uuid())
  userId       String
  type         PointTransactionType
  amount       Decimal             @db.Decimal(10, 2)
  description  String
  merchantId   String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  
  // Relationships
  user         User                @relation(fields: [userId], references: [id])
}

// Enums
enum UserRole {
  CUSTOMER
  MERCHANT
  ADMIN
  SUPER_ADMIN
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum VirtualAccountProvider {
  EZPG
  DAESUN
}

enum VirtualAccountStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum TransactionType {
  deposit
  withdrawal
  transfer
  fee
}

enum TransactionStatus {
  pending
  completed
  failed
  processing
  refunded
}

enum PointTransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
} 
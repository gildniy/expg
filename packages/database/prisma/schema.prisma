generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String // Hashed password
  name      String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pointBalance       PointBalance?
  virtualAccount     VirtualAccount?
  transactions       Transaction[]
  withdrawalRequests WithdrawalRequest[]

  @@map("users")
}

model PointBalance {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance   Int      @default(0) // Store points as integers
  updatedAt DateTime @updatedAt

  @@map("point_balances")
}

model VirtualAccount {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountNumber   String   @unique // The virtual account number provided by EZPG
  bankCode        String? // e.g., "004" (Optional if always the same)
  bankName        String? // e.g., "Kookmin Bank" (Optional)
  status          String   @default("ACTIVE") // ACTIVE, INACTIVE
  ezpgReferenceId String? // Any ID EZPG provides upon creation
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("virtual_accounts")
}

model Transaction {
  id           String          @id @default(uuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  type         TransactionType
  status       String // PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED
  amount       Int // Amount in KRW (for deposit/withdrawal) or points
  pointsChange Int // Change in points (+/-)
  description  String?
  referenceId  String? // e.g., EZPG natvTrNo for withdrawals
  metadata     Json? // Store raw notification payload if needed
  createdAt    DateTime        @default(now())

  @@index([userId])
  @@map("transactions")
}

model WithdrawalRequest {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  transactionId String? // Link to the corresponding Transaction record
  bankCode      String // Customer's bank code
  accountNumber String // Customer's bank account number (Consider encryption)
  accountHolder String // Customer's name on the bank account
  requestedAt   DateTime @default(now())
  status        String // PENDING_APPROVAL, APPROVED, REJECTED (Internal status before calling EZPG)

  @@index([userId])
  @@map("withdrawal_requests")
}

enum Role {
  CUSTOMER
  MERCHANT
  ADMIN
}

enum TransactionType {
  DEPOSIT // Points added from VA deposit
  WITHDRAWAL_REQUEST // Customer requested points withdrawal (points deducted)
  WITHDRAWAL_COMPLETED // EZPG confirmed bank transfer success
  WITHDRAWAL_FAILED // EZPG confirmed bank transfer failure (points might be reverted)
  POINTS_ADJUSTMENT // Manual points adjustment by admin/merchant
}
